name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Check coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage: ${COVERAGE}%"
          COVERAGE_INT=$(echo "$COVERAGE" | cut -d. -f1)
          if [ "$COVERAGE_INT" -lt 60 ]; then
            echo "Coverage is below 60%"
            exit 1
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24

      - uses: pre-commit/action@v3.0.1

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m

  build:
    if: github.event_name != 'pull_request'
    needs: [test, lint]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Generate short SHA
        uses: benjlevesque/short-sha@v3.0
        id: gen-short-sha

      - name: Generate image info
        id: gen-image-info
        run: |
          echo "image_name=${{ secrets.IMAGE_REGISTRY_USERNAME }}/${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
          echo "image_tag=$(echo ${{ github.ref_name }}-${{ steps.gen-short-sha.outputs.sha }} | tr '/' '-')" >> $GITHUB_OUTPUT

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.IMAGE_REGISTRY_USERNAME }}
          password: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.gen-image-info.outputs.image_name }}:${{ steps.gen-image-info.outputs.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
